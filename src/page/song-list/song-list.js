import React, {PureComponent} from 'react'import { ImageBackground, StyleSheet, TouchableWithoutFeedback, Platform, UIManager, ActivityIndicator } from 'react-native'import { flyGet, flyPost } from '../../common/js/fetch'import { View } from 'react-native-animatable'import {  SongListWrapper,  Header,  Title,  SongListWrp,  SongItem,  ItemName,  ItemAlbum} from './style'import { connect } from 'react-redux'import * as actionCreators from '../../store/actionCreators'class SongList extends PureComponent{  constructor (props) {    super(props)    if (Platform.OS === 'android') {//android平台需要开启允许LayoutAnimation ios默认开启      UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);    }    this.state = {      logo: '',      name: '',      songList: [],    }    this.renderList = this.renderList.bind(this)  }  async componentDidMount () {    const { state } = this.props.navigation    switch (state.params.type) {      case 'songList':        this.getSongList(state)        break      case 'singerSong':        this.getSingerSong(state.params.id)        break      case 'top':        this.getTop(state.params.id)        break      default:        break    }  }  async getSongList (state) {    const res = await flyGet('http://ustbhuangyi.com/music/api/getCdInfo', {      g_tk: 1928093487,      inCharset: 'utf-8',      outCharset: 'utf-8',      notice: 0,      format: 'jsonp',      disstid: state.params.id,      type: 1,      json: 1,      utf8: 1,      onlysong: 0,      platform: 'yqq',      hostUin: 0,      needNewCode: 0    })    res.data.cdlist[0].songlist.forEach(item => {      item.image = `https://y.gtimg.cn/music/photo_new/T002R300x300M000${item.albummid}.jpg?max_age=2592000`    })    if (res.data.code === 0) {      this.setState({        name: res.data.cdlist[0].dissname,        logo: res.data.cdlist[0].logo,        songList: res.data.cdlist[0].songlist      })    }  }  async getSingerSong (id) {    const data = {      g_tk: 1928093487,      inCharset: 'utf-8',      outCharset: 'utf-8',      notice: 0,      format: 'jsonp',      hostUin: 0,      needNewCode: 0,      platform: 'yqq',      order: 'listen',      begin: 0,      num: 80,      songstatus: 1,      singermid: id,      jsonpCallback: 'jp2'    }    const res = await flyGet('https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg', data)    let response = res.data.replace('jp2(', '')    response = JSON.parse(response.slice(0, response.length - 2))    if (response.code === 0) {      let arr = []      response.data.list.forEach(item => {        item.musicData.image = `https://y.gtimg.cn/music/photo_new/T002R300x300M000${item.musicData.albummid}.jpg?max_age=2592000`        item.musicData.musicurl = null        arr.push(item.musicData)      })      this.setState({        name: response.data.singer_name,        logo: `https://y.gtimg.cn/music/photo_new/T001R300x300M000${id}.jpg?max_age=2592000`,        songList: arr      })    }    let songMid = []    let songtype = []    this.state.songList.forEach(item => {      songtype.push(0)      songMid.push(item.songmid)    })  }  async getTop (id) {    let data = {      g_tk: 1928093487,      inCharset: 'utf-8',      outCharset: 'utf-8',      notice: 0,      format: 'jsonp',      topid: id,      needNewCode: 1,      uin: 0,      tpl: 3,      page: 'detail',      type: 'top',      platform: 'h5',      jsonpCallback: 'jp1'    }    const res = await flyGet('https://c.y.qq.com/v8/fcg-bin/fcg_v8_toplist_cp.fcg', data)    let response = res.data.replace('jp1(', '')    response = JSON.parse(response.slice(0, response.length - 1))    if (response.code === 0) {      let arr = []      response.songlist.forEach(item => {        item.data.image = `https://y.gtimg.cn/music/photo_new/T002R300x300M000${item.data.albummid}.jpg?max_age=2592000`        item.data.musicurl = null        arr.push(item.data)      })      this.setState({        name: response.topinfo.ListName,        logo: response.topinfo.pic_album,        songList: arr      })    }  }  changeStatus (item, index) {    item.musicurl = null    const {changeStatus, changeList, changeSong, changePaused} = this.props    changeList(this.state.songList)    changeSong(item, index)    changeStatus(true)    changePaused()  }  renderList () {    const {songList} = this.state    return (      <SongListWrp>        {songList.map((item, index) => {          return (            <TouchableWithoutFeedback onPress={() => {this.changeStatus(item, index)}} key={item.songmid}>              <SongItem>                <ItemName>{item.songname}</ItemName>                <ItemAlbum>{item.albumname}</ItemAlbum>              </SongItem>            </TouchableWithoutFeedback>          )        })}      </SongListWrp>    )  }  render () {    const { navigation} = this.props    const { name, logo, songList } = this.state    return (      <SongListWrapper alwaysBounceVertical>        {songList.length > 0 ? null : <ActivityIndicator style={{marginTop: '50%'}} size="large" color="#ccc" />}        <Header>          {logo ? <ImageBackground resizeMode='cover' style={styles.imgBac} source={{uri: logo}}>            <View style={{height: '100%', width: '100%', backgroundColor: 'rgba(0,0,0,0.4)', alignItems: 'center', justifyContent: 'center'}}>              <View                // animation={{                //   from: { rotateZ: '0deg' },                //   to: { rotateZ: '90deg' },                // }}              ><Title>{name}</Title></View>            </View>          </ImageBackground> : null}        </Header>        {this.renderList()}      </SongListWrapper>    )  }}const styles = StyleSheet.create({  imgBac: {    height: '100%',    width: '100%',    backgroundColor: 'rgba(0,0,0,.4)',    alignItems: 'center',    justifyContent: 'center'  }})const mapDispatch = (dispatch) => ({  changeStatus (status) {    dispatch(actionCreators.changStatus(status))  },  changeList (list) {    dispatch(actionCreators.changeList(list))  },  changeSong (song, index) {    dispatch(actionCreators.changeSong(song, index))  },  changePaused () {    dispatch(actionCreators.changePaused(false))  }})const mapState = (state) => ({  showPlayer: state.getIn(['showPlayer'])})export default connect(mapState, mapDispatch)(SongList)