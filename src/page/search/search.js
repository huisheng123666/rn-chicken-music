import React, {Component, Fragment} from 'react';import { Text, StyleSheet, Image, TouchableOpacity, FlatList, View, ActivityIndicator } from 'react-native'import {  SearchWrapper,  SearchInput,  Input,  SongItem,  SongDesc} from './style'import {utilWidth} from '../../common/js/util'import { flyGet } from '../../common/js/fetch'import { connect } from 'react-redux'import * as actionCreators from '../../store/actionCreators'class Search extends Component {  constructor (props) {    super(props)    this.state = {      value: '',      page: 1,      total: 1,      songList: [],      canLoad: true,      showLoading: false    }    this.changeText = this.changeText.bind(this)    this.search = this.search.bind(this)    this._renderItem = this._renderItem.bind(this)    this._renderListFooter = this._renderListFooter.bind(this)  }  changeText (text) {    this.setState({      value: text    })  }  async search (judgeOne) {    let page = this.state.page    if (!judgeOne) {      page = 1    }    if (!judgeOne) {      this.setState({        page: 1,        total: 1,        canLoad: true,        songList: []      })    }    let data = {      g_tk: 862354143,      uin: 0,      format: 'json',      inCharset: 'utf-8',      outCharset: 'utf-8',      notice: 0,      platform: 'h5',      needNewCode: 1,      w: this.state.value,      zhidaqu: 1,      catZhida: 1,      t: 0,      flag: 1,      ie: 'utf-8',      sem: 1,      aggr: 0,      perpage: 20,      n: 20,      p: page,      remoteplace: 'txt.mqq.all',      _: 1541994222858,    }    if (this.state.page > this.state.total || this.state.showLoading) return    const res = await flyGet('http://ustbhuangyi.com/music/api/search', data)    res.data.data.song.list.forEach(item => {      item.image = `https://y.gtimg.cn/music/photo_new/T002R300x300M000${item.albummid}.jpg?max_age=2592000`    })    if (this.state.page === 1) {      this.setState({        page: ++res.data.data.song.curpage,        total: parseInt(res.data.data.song.totalnum / 20) + 1,        songList: this.state.songList.concat(res.data.data.song.list),        canLoad: (res.data.data.song.totalnum / 20) > 0,        showLoading: false      })    } else {      setTimeout(() => {        this.setState({          page: ++res.data.data.song.curpage,          total: parseInt(res.data.data.song.totalnum / 20) + 1,          songList: this.state.songList.concat(res.data.data.song.list),          canLoad: (res.data.data.song.totalnum / 20) > 0,          showLoading: false        })      }, 500)    }  }  _renderListFooter () {    return <View style={{height: 30, width: '100%'}}>      {this.state.showLoading ? <ActivityIndicator size={'small'} color={'red'} animating={true} /> : null}    </View>  }  goPlay (item, index) {    const {changeStatus, changeList, changeSong, changePaused} = this.props    changeList(this.state.songList)    changeSong(item, index)    changeStatus(true)    changePaused()  }  _renderItem (item) {    const { navigation } = this.props    return (      <TouchableOpacity onPress={() => {this.goPlay(item.item, item.index)}}>        <SongItem style={{width: '100%'}}>          <SongDesc>{item.item.songname}-{item.item.singer.map(item1 => {            return <Text key={'a' + item1.id}>{item1.name}/</Text>          })}</SongDesc>        </SongItem>      </TouchableOpacity>    )  }  loadMore () {    if (!this.state.canLoad || this.state.songList.length < 20) return    this.setState({      showLoading: true    })    this.search(true)  }  _keyExtractor = (item, index) => 'a' + index + Math.random()  render() {    return (      <SearchWrapper>        <SearchInput>          <Image source={require('./search.png')} style={styles.icon} />          <Input value={this.state.value}                 onSubmitEditing={() => {this.search(false)}}                 ListFooterComponent={this._renderListFooter}                 onChangeText={(text) => {this.changeText(text)}} />          <TouchableOpacity onPress={() => {this.setState({value: '', songList: []})}}>            <Image source={require('./close.png')} style={styles.icon} />          </TouchableOpacity>        </SearchInput>        <View style={styles.scroll}>          <FlatList data={this.state.songList}                    renderItem={this._renderItem}                    ListFooterComponent={this._renderListFooter}                    onEndReached={() => {this.loadMore()}}                    onEndReachedThreshold={0.1}                    showsVerticalScrollIndicator={false}                    keyExtractor={this._keyExtractor}/>        </View>      </SearchWrapper>    );  }}const styles = StyleSheet.create({  icon: {    width: utilWidth(46),    height: utilWidth(46)  },  scroll: {    width: '100%',    position: 'absolute',    left: 0,    top: utilWidth(160),    bottom: 0  }})const mapDispatch = (dispatch) => ({  changeStatus (status) {    dispatch(actionCreators.changStatus(status))  },  changeList (list) {    dispatch(actionCreators.changeList(list))  },  changeSong (song, index) {    dispatch(actionCreators.changeSong(song, index))  },  changePaused () {    dispatch(actionCreators.changePaused(false))  }})const mapState = (state) => ({  showPlayer: state.getIn(['showPlayer'])})export default connect(mapState, mapDispatch)(Search)